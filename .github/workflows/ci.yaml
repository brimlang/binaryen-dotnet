# CI workflow for Brim.Binaryen
#
# - Uses nbgv versioning to determine the required native library release
# - Downloads all required native artifacts from the corresponding GitHub Release
# - Fails with a clear message if any artifact is missing
# - No fallback native build; maintainers must run the native-libraries workflow if artifacts are missing

name: ci

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  download-native:
    name: Download prebuilt native libraries
    runs-on: ubuntu-latest
    outputs:
      nbgv_version: ${{ steps.nbgv.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Get nbgv version
        id: nbgv
        run: |
          VERSION=$(dotnet nbgv get-version --format json | jq -r .NuGetPackageVersion)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download native artifacts from release
        id: download
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="binaryen-${{ steps.nbgv.outputs.version }}"
          echo "Looking for release: $RELEASE_TAG"
          if ! gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "::error::Required native library release $RELEASE_TAG not found. Run the 'Build Native Libraries' workflow first."
            exit 1
          fi
          gh release download "$RELEASE_TAG" --pattern "*.tar.gz" --pattern "*.zip"
          mkdir -p artifacts/native
          for file in *.tar.gz; do
            if [ -f "$file" ]; then
              rid="${file%.tar.gz}"
              mkdir -p "artifacts/native/$rid"
              tar -xzf "$file" -C "artifacts/native/$rid"
              echo "Extracted $file to artifacts/native/$rid"
            fi
          done
          for file in *.zip; do
            if [ -f "$file" ]; then
              rid="${file%.zip}"
              mkdir -p "artifacts/native/$rid"
              unzip -q "$file" -d "artifacts/native/$rid"
              echo "Extracted $file to artifacts/native/$rid"
            fi
          done
          # Check for all required RIDs
          missing=0
          for rid in linux-x64 osx-arm64 osx-x64 win-x64; do
            if [ ! -d "artifacts/native/$rid" ] || [ -z "$(ls -A artifacts/native/$rid 2>/dev/null)" ]; then
              echo "::error::Missing native artifact for $rid in release $RELEASE_TAG."
              missing=1
            fi
          done
          if [ "$missing" -ne 0 ]; then
            echo "::error::One or more required native artifacts are missing. Run the 'Build Native Libraries' workflow and publish a new release."
            exit 1
          fi

      - name: Upload native artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-all
          path: artifacts/native/
          if-no-files-found: error

  test:
    name: Test (${{ matrix.os }})
    needs: download-native
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
          # macOS and Windows support can be enabled as needed
          # - os: macos-14
          #   rid: osx-arm64
          # - os: macos-13
          #   rid: osx-x64
          # - os: windows-2022
          #   rid: win-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Download native artifact for this RID
        uses: actions/download-artifact@v4
        with:
          name: native-all
          path: artifacts/native

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: |
          dotnet test --configuration Release --no-build --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{ matrix.os }}
          path: |
            **/TestResults/*.trx
            **/TestResults/*.xml
          if-no-files-found: ignore

  pack:
    name: Pack NuGet
    needs: [download-native, test]
    if: needs.test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Download all native artifacts
        uses: actions/download-artifact@v4
        with:
          name: native-all
          path: artifacts/native

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build
        run: |
          dotnet build src/Brim.Binaryen/ --configuration Release

      - name: Pack
        run: |
          dotnet pack --configuration Release -o artifacts/package/release

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: artifacts/package/release/*.nupkg
          if-no-files-found: error

  publish-gh:
    name: Publish to GitHub Packages (on main)
    needs: pack
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download nupkg
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./nupkg

      - name: Push to GitHub Packages
        run: |
          dotnet nuget push "nupkg/*.nupkg" \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --skip-duplicate

  publish-nuget:
    name: Publish to NuGet (on tag)
    needs: pack
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download nupkg
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./nupkg

      - name: Push to NuGet
        run: |
          dotnet nuget push "nupkg/*.nupkg" \
            --api-key "${{ secrets.NUGET_API_KEY }}" \
            --source "https://api.nuget.org/v3/index.json" \
            --skip-duplicate
