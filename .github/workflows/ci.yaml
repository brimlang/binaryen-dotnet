name: ci

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  download-native:
    name: Download prebuilt native libraries
    runs-on: ubuntu-latest
    outputs:
      found_prebuilt: ${{ steps.download.outputs.found_prebuilt }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get binaryen version
        id: version
        run: |
          cd extern/binaryen
          BINARYEN_VERSION=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "unknown")
          echo "binaryen_version=$BINARYEN_VERSION" >> $GITHUB_OUTPUT
          echo "release_tag=binaryen-$BINARYEN_VERSION" >> $GITHUB_OUTPUT

      - name: Download prebuilt libraries
        id: download
        continue-on-error: true
        run: |
          RELEASE_TAG="${{ steps.version.outputs.release_tag }}"
          echo "Looking for release: $RELEASE_TAG"
          
          # Check if release exists and download artifacts
          if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "Found release $RELEASE_TAG, downloading artifacts..."
            gh release download "$RELEASE_TAG" --pattern "*.tar.gz" --pattern "*.zip"
            
            # Extract archives to proper artifact structure
            mkdir -p artifacts/native
            
            for file in *.tar.gz; do
              if [ -f "$file" ]; then
                rid="${file%.tar.gz}"
                mkdir -p "artifacts/native/$rid"
                tar -xzf "$file" -C "artifacts/native/$rid"
                echo "Extracted $file to artifacts/native/$rid"
              fi
            done
            
            for file in *.zip; do
              if [ -f "$file" ]; then
                rid="${file%.zip}"
                mkdir -p "artifacts/native/$rid"
                unzip -q "$file" -d "artifacts/native/$rid"
                echo "Extracted $file to artifacts/native/$rid"
              fi
            done
            
            echo "found_prebuilt=true" >> $GITHUB_OUTPUT
          else
            echo "Release $RELEASE_TAG not found, will fall back to building"
            echo "found_prebuilt=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload native artifacts
        if: steps.download.outputs.found_prebuilt == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: native-linux-x64
          path: artifacts/native/linux-x64/
          if-no-files-found: error

      - name: Upload native artifacts (osx-arm64)
        if: steps.download.outputs.found_prebuilt == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: native-osx-arm64
          path: artifacts/native/osx-arm64/
          if-no-files-found: ignore

      - name: Upload native artifacts (osx-x64)
        if: steps.download.outputs.found_prebuilt == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: native-osx-x64
          path: artifacts/native/osx-x64/
          if-no-files-found: ignore

      - name: Upload native artifacts (win-x64)
        if: steps.download.outputs.found_prebuilt == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: native-win-x64
          path: artifacts/native/win-x64/
          if-no-files-found: ignore

  native-fallback:
    name: Build native fallback (${{ matrix.rid }})
    needs: download-native
    if: needs.download-native.outputs.found_prebuilt != 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            cmd: ./eng/native/build.sh --rid linux-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: artifacts/build/native/binaryen-${{ matrix.rid }}
          key: ${{ runner.os }}-cmake-${{ matrix.rid }}-${{ hashFiles('eng/native/**', 'extern/binaryen/**', 'mise.toml') }}
          restore-keys: |
            ${{ runner.os }}-cmake-${{ matrix.rid }}-

      - name: Build native
        run: ${{ matrix.cmd }}

      - name: Upload native artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.rid }}
          path: artifacts/native/${{ matrix.rid }}/
          if-no-files-found: error

  test:
    name: Test (${{ matrix.os }})
    needs: [download-native, native-fallback]
    if: always() && (needs.download-native.outputs.found_prebuilt == 'true' || needs.native-fallback.result == 'success')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
          # macOS support temporarily disabled due to test crashes - see issue #X
          # - os: macos-14
          #   rid: osx-arm64
          # - os: macos-13
          #   rid: osx-x64
          # - os: windows-2022
          #   rid: win-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Download native artifact for this RID
        uses: actions/download-artifact@v4
        with:
          name: native-${{ matrix.rid }}
          path: artifacts/native/${{ matrix.rid }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: |
          dotnet test --configuration Release --no-build --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{ matrix.os }}
          path: |
            **/TestResults/*.trx
            **/TestResults/*.xml
          if-no-files-found: ignore

  pack:
    name: Pack NuGet
    needs: [download-native, native-fallback, test]
    if: always() && needs.test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Download all native artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/native

      - name: Normalize native artifact layout
        run: |
          shopt -s nullglob
            for d in artifacts/native/native-*; do
              rid="${d##*/native-}"
              mkdir -p "artifacts/native/$rid"
              rsync -a "$d/" "artifacts/native/$rid/"
            done

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build
        run: |
          dotnet build src/Brim.Binaryen/ --configuration Release

      - name: Pack
        run: |
          dotnet pack --configuration Release -o artifacts/package/release

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: artifacts/package/release/*.nupkg
          if-no-files-found: error

  publish-gh:
    name: Publish to GitHub Packages (on main)
    needs: pack
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download nupkg
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./nupkg

      - name: Push to GitHub Packages
        run: |
          dotnet nuget push "nupkg/*.nupkg" \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --skip-duplicate

  publish-nuget:
    name: Publish to NuGet (on tag)
    needs: pack
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download nupkg
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./nupkg

      - name: Push to NuGet
        run: |
          dotnet nuget push "nupkg/*.nupkg" \
            --api-key "${{ secrets.NUGET_API_KEY }}" \
            --source "https://api.nuget.org/v3/index.json" \
            --skip-duplicate
