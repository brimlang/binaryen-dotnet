<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <RuntimeIdentifiers>linux-x64;osx-arm64;osx-x64;win-x64</RuntimeIdentifiers>
    <UseCurrentRuntimeIdentifier>true</UseCurrentRuntimeIdentifier>
    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <!-- Explicitly detect the runtime if not set -->
  <!-- Only x64 is supported for Linux/Windows. Extend if ARM64 support is added. -->
  <PropertyGroup Condition="'$(RuntimeIdentifier)' == ''">
    <!-- macOS: Apple Silicon vs Intel -->
    <RuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('OSX')) And $([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString()) == 'Arm64'">osx-arm64</RuntimeIdentifier>
    <RuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('OSX')) And $([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString()) != 'Arm64'">osx-x64</RuntimeIdentifier>
    <!-- Linux: Only x64 supported -->
    <RuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('Linux')) And $([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString()) == 'X64'">linux-x64</RuntimeIdentifier>
    <!-- Windows: Only x64 supported -->
    <RuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('Windows')) And $([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString()) == 'X64'">win-x64</RuntimeIdentifier>
    <!-- Error if unsupported platform -->
    <Error Condition="'$(RuntimeIdentifier)' == ''">
      <Text>Unsupported platform or architecture. Please specify a supported RuntimeIdentifier (linux-x64, osx-arm64, osx-x64, win-x64).</Text>
    </Error>
  </PropertyGroup>
  
  <!-- Debug: Show what RuntimeIdentifier we detected -->
  <Target Name="ShowRuntimeIdentifier" BeforeTargets="Build">
    <Message Text="RuntimeIdentifier: $(RuntimeIdentifier)" Importance="high" />
    <Message Text="IsOSX: $([MSBuild]::IsOSPlatform('OSX'))" Importance="high" />
    <Message Text="ProcessArchitecture: $([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString())" Importance="high" />
  </Target>

  <ItemGroup>
    <PackageReference Include="coverlet.collector" Version="6.0.2" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.12.0" />
    <PackageReference Include="xunit" Version="2.9.2" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.8.2" />
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\Brim.Binaryen\Brim.Binaryen.csproj" />
  </ItemGroup>

  <!-- Linux -->
  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'linux-x64'">
    <None Include="$(MSBuildProjectDirectory)/../../artifacts/native/linux-x64/*"
          CopyToOutputDirectory="PreserveNewest"
          Link="%(Filename)%(Extension)" />
  </ItemGroup>

  <!-- macOS -->
  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'osx-arm64'">
    <None Include="$(MSBuildProjectDirectory)/../../artifacts/native/osx-arm64/*"
          CopyToOutputDirectory="PreserveNewest"
          Link="%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'osx-x64'">
    <None Include="$(MSBuildProjectDirectory)/../../artifacts/native/osx-x64/*"
          CopyToOutputDirectory="PreserveNewest"
          Link="%(Filename)%(Extension)" />
  </ItemGroup>

  <!-- Windows -->
  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'win-x64'">
    <None Include="$(MSBuildProjectDirectory)\..\..\artifacts\native\win-x64\*"
          CopyToOutputDirectory="PreserveNewest"
          Link="%(Filename)%(Extension)" />
  </ItemGroup>

  <!-- Make wasm-opt executable on POSIX after copy (no-op on Windows). -->
  <Target Name="MakeWasmOptExecutable" AfterTargets="Build;Publish" Condition="'$(OS)' != 'Windows_NT'">
    <ItemGroup>
      <_WasmOpt Include="$(OutDir)wasm-opt*"/>
    </ItemGroup>
    <Exec Command="chmod +x &quot;%(_WasmOpt.Identity)&quot;" IgnoreExitCode="true" />
  </Target>
</Project>
